1. Search for the given string in a single file 
   grep [search word] [filename]

2. Case insensitive search using grep -i
   grep -i "string" FILE

3. Match regular expression in files            #### it searches for all the pattern that starts with “lines” and ends with “empty” with anything in-between. 
   grep "lines.*empty" demo_file                     i.e To search “lines[anything in-between]empty” in the demo_file.

4. Checking for full words, not for sub-strings using grep -w  
   grep -iw a file

5.Displaying lines before/after/around the match using grep -A, -B and -C
  grep -A 2 -i how file                           ------- A - after | B - before | c - before and after both 

6.Highlighting the search using GREP_OPTIONS
  export GREP_OPTIONS='--color=auto' GREP_COLOR='100;8'
  grep this demo_file

7. Searching in all files recursively using grep -r
   When you want to search in all the files under the current directory and its sub directory. -r option is the one which you need to use. 
   grep -r "ramesh" *

8.Invert match using grep -v
  grep -v "go" demo_text              ------- This example will display all the lines that did not match the word “go”.

9. Counting the number of matches using grep -c
   grep -c "go" demo_text
   When you want do find out how many lines that does not match the pattern
   grep -v -c this demo_file

10.Display only the file names which matches the given pattern using grep -l
   grep -l how file

11. Show line number while displaying the output using grep -n
     grep -ni how file

--------------------------------------------------------------------------------------------
SED-Command
------------
SED command in UNIX is stands for stream editor and it can perform lot’s of function on file like, searching, find and replace, insertion or deletion. 
Though most common use of SED command in UNIX is for substitution or for find and replace.

1.Replacing or substituting string
  # sed 's/unix/linux/' file1

Here the “s” specifies the substitution operation. The “/” are delimiters.
By default, the sed command replaces the first occurrence of the pattern in each line and it won’t replace the second, third…occurrence in the line.

2.Replacing the nth occurrence of a pattern in a line 
  Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line. 
  # sed 's/unix/linux/2' file1

3.Replacing all the occurrence of the pattern in a line 
  The substitute flag /g (global replacement
  # sed 's/unix/linux/g' file1

4.Replacing from nth occurrence to all occurrences in a line
  Use the combination of /1, /2 etc and /g to replace all the patterns from the nth occurrence of a pattern in a line. 
  # sed 's/unix/linux/3g' geekfile.txt

5.Parenthesize first character of each word
  This sed example prints the first character of every word in parenthesis.
  # echo "Welcome To The Geek Stuff" | sed 's/\(\b[A-Z]\)/\(\1\)/g'

6.Replacing string on a specific line number
  # sed '3 s/unix/linux/' geekfile.txt

7.Duplicating the replaced line with /p flag 
  The /p print flag prints the replaced line twice on the terminal.
  # sed 's/unix/linux/p' geekfile.txt

8.Printing only the replaced lines
  Use the -n option along with the /p print flag to display only the replaced lines.
  # sed -n 's/unix/linux/p' geekfile.txt
  If you use -n alone without /p, then the sed does not print anything.

9.Replacing string on a range of lines
  # sed '1,3 s/unix/linux/' geekfile.txt
  # sed '2,$ s/unix/linux/' geekfile.txt
  Here $ indicates the last line in the file. So the sed command replaces the text from second line to last line in the file.

10.Deleting lines from a particular file 
   SED command can also be used for deleting lines from a particular file.
  
  1.To Delete a particular line say n in this example
    # sed '5d' filename.txt
   
  2.To Delete a last line
    # sed '$d' filename.txt
   
  3.To Delete line from range x to y
    # sed '3,6d' filename.txt
   
  4.To Delete from nth to last line
    # sed '12,$d' filename.txt
   
  5.To Delete pattern matching line
    # sed '/abc/d' filename.txt

 Let’s start with File Spacing
 -------------------------------
11.Insert one blank line after each line
   # sed G a.txt

12.To insert two blank lines
   # sed 'G;G' a.txt

13.Delete blank lines and insert one blank line after each line 
   # sed '/^$/d;G' a.txt

14.Insert 5 spaces to the left of every lines
   # sed 's/^/     /' a.txt

15. Save the changes permanently in the configuration file
   # sed -i 's/=enforcing/=disabled/' /etc/selinux/config                 ----------- -i option used to permanently save the cahnges 

                                                                          ----------- -e option used to add one more search to the same line

 Awk Command
 -----------
 1. AWK Operations:
  (a) Scans a file line by line
  (b) Splits each input line into fields
  (c) Compares input line/fields to pattern
  (d) Performs action(s) on matched lines

 2. Useful For:
  (a) Transform data files
  (b) Produce formatted reports

 3. Programming Constructs:
  (a) Format output lines
  (b) Arithmetic and string operations
  (c) Conditionals and loops

1. Default behavior of Awk 
   By default Awk prints every line of data from the specified file.
   # awk '{print}' employee.txt

2. Print the lines which matches with the given pattern.
   In the above example, the awk command prints all the line which matches with the ‘manager’.
   # awk '/manager/ {print}' employee.txt 

3. Splitting a Line Into Fields:
   For each record i.e line, the awk command splits the record delimited by whitespace character by default and stores it in the $n variables. If the line has 4 words, 
   It will be stored in $1, $2, $3 and $4 respectively. Also, $0 represents the whole line.
   # awk '{print $1,$4}' employee.txt 

 Built In Variables In Awk
 --------------------------
1. NR - Use of NR built-in variables (Display Line Number)
   #  awk '{print NR,$0}' file3

2. NF - Use of NF built-in variables (Display Last Field)
   # awk '{print $2,NF}' file3
   Another use of NR built-in variables (Display Line From 3 to 6)
   # awk 'NR==3, NR==6 {print NR,$0}' employee.txt

3. To print any non empty line if present
   # awk 'NF > 0' geeksforgeeks.txt

4. To count the lines in a file
   # awk 'END { print NR }' geeksforgeeks.txt

5. Printing lines with more than 10 characters
   # awk 'length($0) > 10' geeksforgeeks.txt

6. To find/check for any string in any column
   # awk '{if($2 == "peon") print $0;}' file3






